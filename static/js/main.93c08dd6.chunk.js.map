{"version":3,"sources":["Header.js","computerPlayersAndStrategy/computerPlayerValues.js","SelectPlayer.js","SelectGoFirst.js","computerPlayersAndStrategy/boardLists.js","Board.js","GameMessage.js","SelectRestart.js","computerPlayersAndStrategy/boardSymmetries.js","computerPlayersAndStrategy/scoringSpecialCaseConstants.js","computerPlayersAndStrategy/scoringComputerPlays.js","computerPlayersAndStrategy/computerStrategy.js","App.js","index.js"],"names":["PlayerInfoBox","player","s","wins","className","style","color","colour","name","piece","Header","players","draws","computerName","diff","computerColour","computerOptimalRate","isColour","str","Option","SelectHuman","setPlayers","useState","setPlayer","htmlFor","type","id","placeholder","value","onChange","e","target","toLowerCase","onClick","preventDefault","alert","loses","SelectComputer","difficulty","parseInt","Math","floor","random","getDifficulty","PlayerSelection","num","length","SelectGoFirst","setToPlay","map","index","newPlayers","lines","allSquares","checkForWin","board","filter","line","pieces","r","c","includes","Set","size","BoardSquare","winner","square","r_ind","c_ind","outcome","toPlay","placePiece","tdClass","ans","borders","Board","winLines","row","arrs","p","q","some","arr","a","b","GameMessage","SelectRestart","reset","resetBoard","rotateSquare","rotation","doSquaresRotate","sq1","sq2","_","isEqual","doBoardsRotate","board1","board2","every","row1","col1","row2","col2","reflectSquare","reflection","col","doSquaresReflect","doBoardsReflect","specialSquare1","specialBoard2","specialSquare2a","specialSquare2b","isSpecialCase","specialBoard","specialSquare","scorePlay","specialBoard1","score","slice","subArr","item","i","forEach","sortedPieces","sort","scorePlayRelativeToLine","sortScoredSquares","findNextPlay","orderedPlays","shuffle","isValidPlay","squares","square1","ind1","square2","ind2","isNotDuplicate","console","log","App","initBoard","setBoard","setOutcome","newBoard","isFull","useEffect","setTimeout","SelectPlayer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.93c08dd6.chunk.js","sourcesContent":["function Header({ players }) {\n  let s = players[0].draws === 1 ? \"\" : \"s\";\n  return (\n    <>\n      <header>\n        <PlayerInfoBox player={players[0]} />\n        <span className=\"spec draws\">\n          {players[0].draws} Draw{s}\n        </span>\n        <PlayerInfoBox player={players[1]} />\n      </header>\n    </>\n  );\n}\n\nfunction PlayerInfoBox({ player }) {\n  let s = player.wins === 1 ? \"\" : \"s\";\n  return (\n    <span className=\"infoBox\">\n      <span className=\"spec name\">\n        <font style={{ color: player.colour }}>{player.name}</font>\n      </span>\n      <span className=\"spec piece\">\n        <font style={{ color: player.colour }}>{player.piece}</font>\n      </span>\n      <span className=\"spec wins\">\n        {player.wins} Win{s}\n      </span>\n    </span>\n  );\n}\n\nexport default Header;\n","// given difficulty in string form (or \"\" indicating random) return integer\nfunction getDifficulty(diff) {\n  if (diff) {\n    return parseInt(diff, 10);\n  } else {\n    return Math.floor(Math.random() * 3);\n  }\n}\n// names of computer players\nfunction computerName(diff) {\n  switch (diff) {\n    case 0:\n      return \"Rookie Ron\";\n    case 1:\n      return \"Seasoned Sam\";\n    case 2:\n      return \"Expert Ellie\";\n    default:\n      return \"Error Erik\";\n  }\n}\n// colours of computer players, and default backup for conflicts\nfunction computerColour(diff) {\n  switch (diff) {\n    case 0:\n      return \"green\";\n    case 1:\n      return \"blue\";\n    case 2:\n      return \"red\";\n    default:\n      return \"orange\";\n  }\n}\n// given a move to play, the chances the computer player will take it\nfunction computerOptimalRate(diff) {\n  switch (diff) {\n    case 0:\n      return 0.55;\n    case 1:\n      return 0.8;\n    case 2:\n      return 0.97;\n    default:\n      return 1;\n  }\n}\n\nexport { getDifficulty, computerName, computerColour, computerOptimalRate };\n","import { useState } from \"react\";\n\nimport {\n  computerName,\n  computerColour,\n  getDifficulty,\n} from \"./computerPlayersAndStrategy/computerPlayerValues.js\";\n\nfunction isColour(str) {\n  let s = new Option().style;\n  s.color = str;\n  return s.color !== \"\";\n}\nfunction numericAdjective(num) {\n  if (num < 13) {\n    return [\n      \"First\",\n      \"Second\",\n      \"Third\",\n      \"Fourth\",\n      \"Fifth\",\n      \"Sixth\",\n      \"Seventh\",\n      \"Eight\",\n      \"Ninth\",\n      \"Tenth\",\n      \"Eleventh\",\n      \"Twelth\",\n      \"Thirteenth\",\n    ][num];\n  } else if (num % 10 === 1) {\n    return num + \"st\";\n  } else if (num % 10 === 2) {\n    return num + \"nd\";\n  } else if (num % 10 === 3) {\n    return num + \"rd\";\n  } else {\n    return num + \"th\";\n  }\n}\n\nfunction PlayerSelection({ players, setPlayers }) {\n  return (\n    <>\n      <div>\n        Enter the {numericAdjective(players.length).toLowerCase()} player's\n        information, <u>or</u> select a difficulty for a computer-controlled\n        player.\n      </div>\n      <SelectHuman players={players} setPlayers={setPlayers} />\n      <SelectComputer players={players} setPlayers={setPlayers} />\n    </>\n  );\n}\n\nfunction SelectHuman({ players, setPlayers }) {\n  /* for temporary storage when creating a player */\n  const [player, setPlayer] = useState({ name: \"\", colour: \"\" });\n\n  return (\n    <form className=\"playerForm human\">\n      <label htmlFor=\"name\">\n        Name:\n        <input\n          type=\"text\"\n          id=\"name\"\n          name=\"name\"\n          placeholder=\"display name\"\n          value={player.name}\n          onChange={(e) => {\n            setPlayer({ ...player, name: e.target.value });\n          }}\n        />\n      </label>\n      <label htmlFor=\"colour\">\n        <font style={isColour(player.colour) ? { color: player.colour } : {}}>\n          Colour:\n        </font>\n        <input\n          type=\"text\"\n          id=\"colour\"\n          name=\"colour\"\n          placeholder=\"name or hex/decimal code\"\n          value={player.colour}\n          onChange={(e) => {\n            setPlayer({ ...player, colour: e.target.value.toLowerCase() });\n          }}\n        />\n      </label>\n      <input\n        className=\"button\"\n        type=\"submit\"\n        value=\"Submit Human\"\n        onClick={(e) => {\n          e.preventDefault();\n          if (player.name === \"\") {\n            alert(\"Please enter a name with at least one character.\");\n          } else if (isColour(player.colour)) {\n            setPlayers([\n              ...players,\n              {\n                name: player.name,\n                colour: player.colour,\n                type: \"human\",\n                wins: 0,\n                draws: 0,\n                loses: 0,\n              },\n            ]);\n            setPlayer({ ...player, name: \"\", colour: \"\" });\n          } else {\n            // maybe later check to see whether they selected the background colour as their piece colour and reject it\n            alert(\n              \"Please enter a valid colour.\\nUse a name ('red'), hex code ('#FF0000'), or decimal code ('rgb(255,0,0)').\"\n            );\n          }\n        }}\n      />\n    </form>\n  );\n}\n\nfunction SelectComputer({ players, setPlayers }) {\n  /* for temporary storage when creating a player */\n  const [player, setPlayer] = useState({ difficulty: \"\" });\n\n  return (\n    <form className=\"playerForm computer\">\n      <label htmlFor=\"difficulty\">\n        Difficulty:\n        <select\n          id=\"difficulty\"\n          name=\"difficulty\"\n          value={player.difficulty}\n          onChange={(e) => {\n            setPlayer({ ...player, difficulty: e.target.value });\n          }}\n        >\n          <option value=\"\">Random</option>\n          <option value=\"0\">Easy</option>\n          <option value=\"1\">Medium</option>\n          <option value=\"2\">Hard</option>\n        </select>\n      </label>\n      <input\n        className=\"button\"\n        type=\"submit\"\n        value=\"Submit Computer\"\n        onClick={(e) => {\n          e.preventDefault();\n          let diff = getDifficulty(player.difficulty);\n          setPlayers([\n            ...players,\n            {\n              name: computerName(diff),\n              type: \"computer\",\n              difficulty: diff,\n              colour: computerColour(diff),\n              wins: 0,\n              draws: 0,\n              loses: 0,\n            },\n          ]);\n          setPlayer({ ...player, difficulty: \"\" });\n        }}\n      />\n    </form>\n  );\n}\n\nexport default PlayerSelection;\n","function SelectGoFirst({ players, setPlayers, setToPlay }) {\n  return (\n    <>\n      <div className=\"message\">Select which player will go first.</div>\n      {players.map((player, index) => {\n        return (\n          <button\n            className=\"button\"\n            key={index}\n            type=\"button\"\n            //style={{ borderColor: player.colour }}\n            onClick={() => {\n              setToPlay(index);\n              let newPlayers = [...players];\n              newPlayers[index].piece = \"X\";\n              newPlayers[1 - index].piece = \"O\";\n              setPlayers(newPlayers);\n            }}\n          >\n            <font style={{ color: player.colour }}>{player.name}</font>\n          </button>\n        );\n      })}\n    </>\n  );\n}\n\nexport default SelectGoFirst;\n","// all possible lines along which one can win (or lose)\n//  order only important for deciding which win to highlight visually\n//  in the event of winning on two lines at once\nconst lines = [\n  [\n    [0, 0],\n    [1, 1],\n    [2, 2],\n  ],\n  [\n    [0, 2],\n    [1, 1],\n    [2, 0],\n  ],\n  [\n    [0, 0],\n    [0, 1],\n    [0, 2],\n  ],\n  [\n    [1, 0],\n    [1, 1],\n    [1, 2],\n  ],\n  [\n    [2, 0],\n    [2, 1],\n    [2, 2],\n  ],\n  [\n    [0, 0],\n    [1, 0],\n    [2, 0],\n  ],\n  [\n    [0, 1],\n    [1, 1],\n    [2, 1],\n  ],\n  [\n    [0, 2],\n    [1, 2],\n    [2, 2],\n  ],\n];\n\n// all possible places to play, listed by rows (order not important)\nconst allSquares = [\n  [0, 0],\n  [0, 1],\n  [0, 2],\n  [1, 0],\n  [1, 1],\n  [1, 2],\n  [2, 0],\n  [2, 1],\n  [2, 2],\n];\n\nexport { lines, allSquares };\n","import { lines } from \"./computerPlayersAndStrategy/boardLists.js\";\n\n// given as className to table cells, dictating where to draw borders\nfunction borders(r_ind, c_ind) {\n  var ans = \"\";\n  if (r_ind < 2) {\n    ans += \" bottom\";\n  }\n  if (c_ind < 2) {\n    ans += \" right\";\n  }\n  return ans;\n}\n\n/* check properties of the board */\nfunction isFull(board) {\n  return ![...board[0], ...board[1], ...board[2]].includes(-1);\n}\nfunction checkForWin(board) {\n  return lines.filter((line) => {\n    let pieces = line.map(([r, c]) => {\n      return board[r][c];\n    });\n    return !pieces.includes(-1) && allEq(pieces);\n  });\n}\nfunction allEq(arr) {\n  return new Set(arr).size === 1;\n}\nfunction isIn(arrs, p, q) {\n  return arrs.some((arr) => {\n    return arr.some(([a, b]) => {\n      return a === p && b === q;\n    });\n  });\n}\n\nfunction BoardSquare({\n  winner,\n  square,\n  r_ind,\n  c_ind,\n  players,\n  outcome,\n  toPlay,\n  placePiece,\n}) {\n  let tdClass = \"square\" + borders(r_ind, c_ind);\n\n  if (square !== -1) {\n    /* piece already placed here */\n    return (\n      <td className={tdClass + (winner ? \" winner\" : \"\")}>\n        <font style={{ color: players[square].colour }}>\n          {players[square].piece}\n        </font>\n      </td>\n    );\n  } else if (\n    outcome === -1 &&\n    toPlay >= 0 &&\n    players[toPlay].type === \"human\"\n  ) {\n    /* no piece here, first player has been selected, square is valid move */\n    return (\n      <td className={tdClass}>\n        <button\n          key={c_ind}\n          type=\"button\"\n          onClick={() => placePiece(r_ind, c_ind)}\n        ></button>\n      </td>\n    );\n  } else {\n    /* no piece here, game not started, or won, or computer to play */\n    return <td className={tdClass} key={c_ind}></td>;\n  }\n}\n\nfunction Board({ board, players, toPlay, outcome, placePiece }) {\n  let winLines = checkForWin(board);\n  return (\n    <table className=\"board\">\n      <tbody>\n        {board.map((row, r_ind) => {\n          return (\n            <tr className=\"row\" key={r_ind}>\n              {row.map((square, c_ind) => {\n                return (\n                  <BoardSquare\n                    winner={isIn(winLines, r_ind, c_ind)}\n                    key={c_ind}\n                    square={square}\n                    r_ind={r_ind}\n                    c_ind={c_ind}\n                    players={players}\n                    outcome={outcome}\n                    toPlay={toPlay}\n                    placePiece={placePiece}\n                  />\n                );\n              })}\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n}\n\nexport default Board;\n\nexport { checkForWin, isFull };\n","function GameMessage({ outcome, players, toPlay }) {\n  if (outcome === -1) {\n    // game on-going\n    return (\n      <>\n        <div className=\"message\">Next to play:</div>\n        <div className=\"message\">\n          <font style={{ color: players[toPlay].colour }}>\n            {players[toPlay].name}\n          </font>\n        </div>\n      </>\n    );\n  } else if (outcome === 2) {\n    // it's a draw\n    return <div className=\"message\">It's a draw.</div>;\n  } else {\n    // outcome indicates which players has won\n    return (\n      <div className=\"message\">\n        <font style={{ color: players[outcome].colour }}>\n          {players[outcome].name}\n        </font>{\" \"}\n        wins!\n      </div>\n    );\n  }\n}\n\nexport default GameMessage;\n","function SelectRestart({ outcome, reset, resetBoard }) {\n  return (\n    <>\n      <button className=\"button\" type=\"button\" onClick={resetBoard}>\n        Play Again\n      </button>\n      <button className=\"button\" type=\"button\" onClick={reset}>\n        New Players\n      </button>\n    </>\n  );\n}\n\nexport default SelectRestart;\n","import _ from \"lodash\";\n\nimport { allSquares } from \"./boardLists.js\";\n\n// passed to filter, return false iff there is an earlier square in squares\n//  which is equivalent\nfunction isNotDuplicate(board, square1, ind1, squares) {\n  // check whether any square is before it and is isomorphic\n  return squares.every((square2, ind2) => {\n    if (ind2 >= ind1) {\n      // square2 is (equal to or) after square\n      return true;\n    } else {\n      // check for rotational symmetry, and then for reflective symmetry\n      return (\n        [1, 2, 3].every((rotation) => {\n          return !(\n            doSquaresRotate(square1, square2, rotation) &&\n            doBoardsRotate(board, board, rotation)\n          );\n        }) &&\n        [1, 2, 3, 4].every((reflection) => {\n          return !(\n            doSquaresReflect(square1, square2, reflection) &&\n            doBoardsReflect(board, board, reflection)\n          );\n        })\n      );\n    }\n  });\n}\n\n// ROTATIONS\n\n// rotate square position clockwise, 1 rotation being 90 degrees\nfunction rotateSquare(square, rotation) {\n  if (rotation % 4 === 0) {\n    return square;\n  } else {\n    return rotateSquare([square[1], 2 - square[0]], rotation - 1);\n  }\n}\n\n// does sq1 rotate to sq2 in rotation rotations\nfunction doSquaresRotate(sq1, sq2, rotation) {\n  return _.isEqual(rotateSquare(sq1, rotation), sq2);\n}\n\n// does board1 look like board2 after rotation rotations\nfunction doBoardsRotate(board1, board2, rotation) {\n  return allSquares.every((square) => {\n    let [row1, col1] = square;\n    let [row2, col2] = rotateSquare(square, rotation);\n    return board1[row1][col1] === board2[row2][col2];\n  });\n}\n\n// REFLECTIONS\n\n// reflect square using ARBITRARY indexing of reflections\nfunction reflectSquare(square, reflection) {\n  let [row, col] = square;\n  switch (reflection) {\n    case 1: // diag1: \\\n      return [col, row];\n    case 2: // diag2: /\n      return [2 - col, 2 - row];\n    case 3: // hori: --\n      return [2 - row, col];\n    case 4: // vert: |\n      return [row, 2 - col];\n    default:\n      return \"Error\";\n  }\n}\n\n// does sq1 reflect to sq2 via reflection given\nfunction doSquaresReflect(sq1, sq2, reflection) {\n  return _.isEqual(reflectSquare(sq1, reflection), sq2);\n}\n\n// does board1 look like board2 after given reflection\nfunction doBoardsReflect(board1, board2, reflection) {\n  return allSquares.every((square) => {\n    let [row1, col1] = square;\n    let [row2, col2] = reflectSquare(square, reflection);\n    return board1[row1][col1] === board2[row2][col2];\n  });\n}\n\nexport { isNotDuplicate };\nexport { doSquaresRotate, doBoardsRotate, doSquaresReflect, doBoardsReflect };\nexport { rotateSquare };\n","function specialBoard1(toPlay) {\n  return [\n    [toPlay, -1, -1],\n    [-1, 1 - toPlay, -1],\n    [-1, -1, -1],\n  ];\n}\nconst specialSquare1 = [2, 2];\n\nfunction specialBoard2(toPlay) {\n  return [\n    [1 - toPlay, -1, -1],\n    [-1, toPlay, -1],\n    [-1, -1, 1 - toPlay],\n  ];\n}\nconst specialSquare2a = [0, 2];\nconst specialSquare2b = [2, 0];\n\nexport {\n  specialBoard1,\n  specialBoard2,\n  specialSquare1,\n  specialSquare2a,\n  specialSquare2b,\n};\n","import _ from \"lodash\";\n\nimport { lines } from \"./boardLists.js\";\nimport {\n  doSquaresRotate,\n  doBoardsRotate,\n  doSquaresReflect,\n  doBoardsReflect,\n} from \"./boardSymmetries.js\";\nimport {\n  specialBoard1,\n  specialBoard2,\n  specialSquare1,\n  specialSquare2a,\n  specialSquare2b,\n} from \"./scoringSpecialCaseConstants.js\";\n\n// helper functions -----------------------------------------\n\n// check if an element of arr \"is\" subArr\nfunction arrIncludes(arr, subArr) {\n  return arr.some((item, i) => _.isEqual(subArr, item));\n}\n\n// checks if the board and square are (equivalent to) a particular special case\nfunction isSpecialCase(board, toPlay, square, specialBoard, specialSquare) {\n  return (\n    [1, 2, 3].some((rotation) => {\n      return (\n        doSquaresRotate(square, specialSquare, rotation) &&\n        doBoardsRotate(board, specialBoard, rotation)\n      );\n    }) ||\n    [1, 2, 3, 4].some((reflection) => {\n      return (\n        doSquaresReflect(square, specialSquare, reflection) &&\n        doBoardsReflect(board, specialBoard, reflection)\n      );\n    })\n  );\n}\n\n// forgetting about the rest of the board, how good is it to play in this line\nfunction scorePlayRelativeToLine(square, board, line, toPlay) {\n  let sortedPieces = line.map(([row, col]) => board[row][col]).sort();\n  if (_.isEqual(sortedPieces, [-1, toPlay, toPlay])) {\n    // can win right now\n    return 1000;\n  } else if (_.isEqual(sortedPieces, [-1, 1 - toPlay, 1 - toPlay])) {\n    // opponent can win next turn\n    return 100;\n  } else if (_.isEqual(sortedPieces, [-1, -1, toPlay])) {\n    // set self up to win next turn\n    return 10;\n  } else if (_.isEqual(sortedPieces, [-1, -1, 1 - toPlay])) {\n    // prevent opponent setting self up to win next turn\n    return 9;\n  } else if (_.isEqual(sortedPieces, [-1, -1, -1])) {\n    // empty line\n    return 2;\n  } else if (_.isEqual(sortedPieces, [-1, 0, 1])) {\n    // this line is useless as nobody can win in it\n    return -2;\n  }\n  return \"Error\";\n}\n\n// primary function -------------------------\n\n// NOTE: only the relative order of scores is important, not the magnitudes\n\n// return the score of playing in a particular square\nfunction scorePlay(square, board, toPlay) {\n  // some special cases which the generic scoring below doesn't deal with well\n  if (\n    isSpecialCase(board, toPlay, square, specialBoard1(toPlay), specialSquare1)\n  ) {\n    return 500;\n  }\n  if (\n    isSpecialCase(board, toPlay, square, specialBoard2(toPlay), specialSquare2a)\n  ) {\n    return -500;\n  }\n  if (\n    isSpecialCase(board, toPlay, square, specialBoard2(toPlay), specialSquare2b)\n  ) {\n    return -500;\n  }\n\n  // generic scoring system\n  var score = 0;\n  lines\n    .slice()\n    .filter((line) => {\n      return arrIncludes(line, square);\n    })\n    .forEach((line) => {\n      score += scorePlayRelativeToLine(square, board, line, toPlay);\n    });\n  return score;\n}\n\nexport { scorePlay };\nexport { scorePlayRelativeToLine, arrIncludes };\n","import _ from \"lodash\";\n\nimport { isNotDuplicate } from \"./boardSymmetries.js\";\nimport { allSquares } from \"./boardLists.js\";\nimport { scorePlay } from \"./scoringComputerPlays.js\";\nimport { computerOptimalRate } from \"./computerPlayerValues.js\";\n\n// helper functions ---------------------------------------\n\n// // randomly sample until an open spot is found, with given starting point\n// function randomPlayWithPreference(board, row, col) {\n//   while (board[row][col] !== -1) {\n//     row = Math.floor(Math.random() * 3);\n//     col = Math.floor(Math.random() * 3);\n//   }\n//   return { row, col };\n// }\n\n// // randomly sample until an open spot is found\n// function randomPlay(board) {\n//   return randomPlayWithPreference(\n//     board,\n//     Math.floor(Math.random() * 3),\n//     Math.floor(Math.random() * 3)\n//   );\n// }\n\n// check whether the spot on the board is open\nfunction isValidPlay(square, board) {\n  let [row, col] = square;\n  return board[row][col] === -1;\n}\n\n// when applied, the array is pre-shuffled, so ties are already randomly broken\nfunction sortScoredSquares(a, b) {\n  if (b.score !== a.score) {\n    return b.score - a.score;\n  }\n}\n\n// primary function ----------------------------------------\n\nfunction findNextPlay(diff, board, toPlay) {\n  // all computer players play the same strategy\n  // playable positions are shuffled, assigned a score, and sorted\n  //  (not quite that order) - and isomorphic options are removed\n  //    (otherwise they get bunched and the chances of skipping are tiny)\n  // computer 'attempts' to play each in order,\n  //   with weighted success rate (based on difficulty of computer player)\n  let orderedPlays = _.shuffle(allSquares.slice())\n    .filter((square) => isValidPlay(square, board))\n    .filter((square, index, squares) =>\n      isNotDuplicate(board, square, index, squares)\n    )\n    .map((square) => {\n      let [row, col] = square;\n      return { row, col, score: scorePlay(square, board, toPlay) };\n    })\n    .sort(sortScoredSquares);\n\n  console.log(orderedPlays);\n\n  for (let square of orderedPlays) {\n    if (computerOptimalRate(diff) > Math.random()) {\n      return square;\n    }\n  }\n\n  // if each square in the ordered list was rejected, select one randomly\n  return _.shuffle(orderedPlays)[0];\n}\n\nexport { findNextPlay };\nexport { isValidPlay };\n","import { useState, useEffect } from \"react\";\n\nimport Header from \"./Header.js\";\nimport SelectPlayer from \"./SelectPlayer.js\";\nimport SelectGoFirst from \"./SelectGoFirst.js\";\nimport Board from \"./Board.js\";\nimport GameMessage from \"./GameMessage.js\";\nimport SelectRestart from \"./SelectRestart.js\";\n\nimport { findNextPlay } from \"./computerPlayersAndStrategy/computerStrategy.js\";\nimport { computerColour } from \"./computerPlayersAndStrategy/computerPlayerValues.js\";\nimport { checkForWin, isFull } from \"./Board.js\";\n\nimport \"./index.css\";\nimport \"./header.css\";\nimport \"./board.css\";\nimport \"./buttonsAndForms.css\";\n\n// TODO: ideally, the board functions should be compartmentalized in their\n//  own file - which requires a lot of prop drilling, so context should be used\n\nfunction App() {\n  /* constants */\n\n  /* a player consists of: name, colour, type, wins, draws, loses */\n  const [players, setPlayers] = useState([]);\n  /* board position is i for player i, -1 for empty */\n  const initBoard = [\n    [-1, -1, -1],\n    [-1, -1, -1],\n    [-1, -1, -1],\n  ];\n  const [board, setBoard] = useState(initBoard);\n  const [toPlay, setToPlay] = useState(-1);\n  /* 0, 1 for player win, -1 for not yet, 2 for draw */\n  const [outcome, setOutcome] = useState(-1);\n\n  /* effects */\n\n  useEffect(() => {\n    // if computer's turn, do it's move\n    if (toPlay >= 0 && players[toPlay].type === \"computer\") {\n      let { row, col } = findNextPlay(\n        players[toPlay].difficulty,\n        board,\n        toPlay\n      );\n      setTimeout(() => {\n        placePiece(row, col);\n      }, 700 + players[toPlay].difficulty * 350);\n    }\n    // eslint-disable-next-line\n  }, [toPlay]);\n  useEffect(() => {\n    // reselect a computer colour if necessary to avoid conflict\n    if (players.length === 2 && players[0].colour === players[1].colour) {\n      if (players[1].type === \"computer\") {\n        let newPlayers = [...players];\n        newPlayers[1].colour = computerColour(-1);\n        setPlayers(newPlayers);\n      } else if (players[0].type === \"computer\") {\n        let newPlayers = [...players];\n        newPlayers[0].colour = computerColour(-1);\n        setPlayers(newPlayers);\n      }\n    }\n    // eslint-disable-next-line\n  }, [players.length]);\n\n  /* functions */\n  function placePiece(r_ind, c_ind) {\n    // first place the piece\n    let newBoard = [...board];\n    newBoard[r_ind][c_ind] = toPlay;\n    setBoard(newBoard);\n    // now check whether the game is over and act accordingly\n    if (checkForWin(board).length > 0) {\n      setOutcome(toPlay);\n      let newPlayers = [...players];\n      newPlayers[toPlay].wins += 1;\n      newPlayers[1 - toPlay].loses += 1;\n      setPlayers(newPlayers);\n    } else if (isFull(board)) {\n      setOutcome(2);\n      let newPlayers = [...players];\n      newPlayers[toPlay].draws += 1;\n      newPlayers[1 - toPlay].draws += 1;\n      setPlayers(newPlayers);\n    } else {\n      setToPlay(1 - toPlay);\n    }\n  }\n\n  /* reset states */\n  function reset() {\n    resetBoard();\n    setPlayers([]);\n  }\n  function resetBoard() {\n    /* not just the board, but also the outcome and who goes first */\n    setBoard(initBoard);\n    setOutcome(-1);\n    setToPlay(-1);\n    let newPlayers = [...players];\n    delete newPlayers[0].piece;\n    delete newPlayers[1].piece;\n    setPlayers(newPlayers);\n  }\n\n  /* return */\n\n  if (players.length < 2) {\n    return <SelectPlayer players={players} setPlayers={setPlayers} />;\n  } else if (toPlay === -1) {\n    /* pick who goes first */\n    return (\n      <>\n        <Header players={players} />\n        <Board\n          board={board}\n          players={players}\n          toPlay={toPlay}\n          outcome={outcome}\n          placePiece={placePiece}\n        />\n        <SelectGoFirst\n          players={players}\n          setPlayers={setPlayers}\n          setToPlay={setToPlay}\n        />\n      </>\n    );\n  } else {\n    return (\n      <>\n        <Header players={players} />\n        <Board\n          board={board}\n          players={players}\n          toPlay={toPlay}\n          outcome={outcome}\n          placePiece={placePiece}\n        />\n        <GameMessage players={players} toPlay={toPlay} outcome={outcome} />\n        {outcome !== -1 && (\n          <SelectRestart\n            outcome={outcome}\n            reset={reset}\n            resetBoard={resetBoard}\n          />\n        )}\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}