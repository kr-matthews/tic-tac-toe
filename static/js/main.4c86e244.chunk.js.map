{"version":3,"sources":["Header.js","computerPlayers.js","SelectPlayer.js","SelectGoFirst.js","Board.js","GameMessage.js","SelectRestart.js","App.js","index.js"],"names":["Header","players","p0","p1","colour","piece","name","wins","draws","computerName","diff","computerColour","probabilityOfOptimalPlay","lines","allSquares","specialSquare1","specialBoard2","toPlay","specialSquare2a","specialSquare2b","arrEq","arr1","arr2","length","every","item","i","randomPlay","board","row","col","Math","floor","random","randomPlayWithPreference","rotateSquare","square","rotation","doSquaresRotate","sq1","sq2","doBoardsRotate","board1","board2","row1","col1","row2","col2","reflectSquare","reflection","doSquaresReflect","doBoardsReflect","isSpecialCase","specialBoard","specialSquare","some","scorePlay","specialBoard1","score","slice","filter","line","subArr","forEach","sortedPieces","map","sort","scorePlayRelativeToLine","sortScoredSquares","a","b","findNextPlay","orderedPlays","_","shuffle","isValidPlay","index","squares","square1","ind1","square2","ind2","isNotDuplicate","console","log","SelectHuman","setPlayers","useState","player","setPlayer","htmlFor","type","id","placeholder","value","onChange","e","target","toLowerCase","onClick","preventDefault","str","s","Option","style","color","isColour","alert","loses","SelectComputer","difficulty","parseInt","getDifficulty","PlayerSelection","num","SelectGoFirst","setToPlay","newPlayers","BoardSquare","r_ind","c_ind","outcome","placePiece","Board","GameMessage","SelectRestart","reset","resetBoard","App","initBoard","setBoard","setOutcome","r","c","newBoard","all_eq","includes","arr","Set","size","useEffect","setTimeout","SelectPlayer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4c86e244.chunk.js","sourcesContent":["function Header({ players }) {\n  const [p0, p1] = players;\n\n  return (\n    <>\n      <header>\n        <span>{p0.colour} - </span>\n        <span>{p0.piece} - </span>\n        <span>{p0.name} - </span>\n        <span>{p0.wins} win(s) || </span>\n        <span>{p0.draws} draw(s)</span>\n        <span> || {p1.wins} win(s) - </span>\n        <span>{p1.name} - </span>\n        <span>{p1.piece} - </span>\n        <span>{p1.colour}</span>\n      </header>\n    </>\n  );\n}\n\nexport default Header;\n","import _ from \"lodash\";\n\n// player-specific values\n\n// names of computer players\nfunction computerName(diff) {\n  switch (diff) {\n    case 0:\n      return \"Rookie Ron\";\n    case 1:\n      return \"Seasoned Sam\";\n    case 2:\n      return \"Expert Ellie\";\n    default:\n      return \"Error Erik\";\n  }\n}\n// colours of computer players, and default backup for conflicts\nfunction computerColour(diff) {\n  switch (diff) {\n    case 0:\n      return \"green\";\n    case 1:\n      return \"yellow\";\n    case 2:\n      return \"red\";\n    default:\n      return \"purple\";\n  }\n}\n// given a move to play, the chances the computer player will take it\nfunction probabilityOfOptimalPlay(diff) {\n  switch (diff) {\n    case 0:\n      return 0.55;\n    case 1:\n      return 0.8;\n    case 2:\n      return 0.97;\n    default:\n      return 1;\n  }\n}\n\n// constants\n\n// all possible lines along which one can win (or lose)\nconst lines = [\n  [\n    [0, 0],\n    [1, 1],\n    [2, 2],\n  ],\n  [\n    [0, 2],\n    [1, 1],\n    [2, 0],\n  ],\n  [\n    [0, 0],\n    [0, 1],\n    [0, 2],\n  ],\n  [\n    [1, 0],\n    [1, 1],\n    [1, 2],\n  ],\n  [\n    [2, 0],\n    [2, 1],\n    [2, 2],\n  ],\n  [\n    [0, 0],\n    [1, 0],\n    [2, 0],\n  ],\n  [\n    [0, 1],\n    [1, 1],\n    [2, 1],\n  ],\n  [\n    [0, 2],\n    [1, 2],\n    [2, 2],\n  ],\n];\n// original code:\n// unfortunately, computes it every time(?)\n// var lines = [];\n// var diag1 = [];\n// var diag2 = [];\n// [0, 1, 2].forEach((i) => {\n//   diag1.push([i, i]);\n//   diag2.push([i, 2 - i]);\n//   var vert = [];\n//   var hori = [];\n//   [0, 1, 2].forEach((j) => {\n//     hori.push([i, j]);\n//     vert.push([j, i]);\n//   });\n//   lines.push(hori);\n//   lines.push(vert);\n// });\n// lines.push(diag1);\n// lines.push(diag2);\n\n// all possible places to play, list by rows\nconst allSquares = [\n  [0, 0],\n  [0, 1],\n  [0, 2],\n  [1, 0],\n  [1, 1],\n  [1, 2],\n  [2, 0],\n  [2, 1],\n  [2, 2],\n];\n\n// special cases for computer strategy\nfunction specialBoard1(toPlay) {\n  return [\n    [toPlay, -1, -1],\n    [-1, 1 - toPlay, -1],\n    [-1, -1, -1],\n  ];\n}\nconst specialSquare1 = [2, 2];\nfunction specialBoard2(toPlay) {\n  return [\n    [1 - toPlay, -1, -1],\n    [-1, toPlay, -1],\n    [-1, -1, 1 - toPlay],\n  ];\n}\nconst specialSquare2a = [0, 2];\nconst specialSquare2b = [2, 0];\n\n// no-longer-needed helper functions\n\nfunction arrEq(arr1, arr2) {\n  if (arr1.length !== arr2.length) {\n    return false;\n  } else {\n    return arr1.every((item, i) => item === arr2[i]);\n  }\n}\nfunction arrIncludes(arr, subArr) {\n  return arr.some((item, i) => arrEq(subArr, item));\n}\n// function emptyInLine(board, line) {\n//   var ans = { row: -1, col: -1 };\n//   line.forEach(([row, col]) => {\n//     if (board[row][col] === -1) {\n//       ans = { row, col };\n//     }\n//   });\n//   return ans;\n// }\n// function canWin(board, toPlay) {\n//   var ans = false;\n//   // reverse because we want the first one (doesn't really matter though)\n//   // probably best to do a loop over indices and break when found\n//   lines\n//     .slice()\n//     .reverse()\n//     .forEach((line) => {\n//       if (\n//         arrEq(line.map(([row, col]) => board[row][col]).sort(), [\n//           -1,\n//           toPlay,\n//           toPlay,\n//         ])\n//       ) {\n//         ans = line;\n//       }\n//     });\n//   return ans;\n// }\n// function canLose(board, toPlay) {\n//   return canWin(board, 1 - toPlay);\n// }\n\n// helper functions\n\nfunction randomPlayWithPreference(board, row, col) {\n  while (board[row][col] !== -1) {\n    row = Math.floor(Math.random() * 3);\n    col = Math.floor(Math.random() * 3);\n  }\n  return { row, col };\n}\nfunction randomPlay(board) {\n  return randomPlayWithPreference(\n    board,\n    Math.floor(Math.random() * 3),\n    Math.floor(Math.random() * 3)\n  );\n}\n\nfunction isValidPlay(square, board) {\n  let [row, col] = square;\n  return board[row][col] === -1;\n}\n// passed to filter, return false iff there is an earlier square in squares\n//  which is equivalent\nfunction isNotDuplicate(board, square1, ind1, squares) {\n  // check whether any square is before it and is isomorphic\n  return squares.every((square2, ind2) => {\n    if (ind2 >= ind1) {\n      // square2 is (equal to or) after square\n      return true;\n    } else {\n      // currently only checks for rotational symmetry\n      // TODO: check for reflective symmetry\n      return (\n        [1, 2, 3].every((rotation) => {\n          return !(\n            doSquaresRotate(square1, square2, rotation) &&\n            doBoardsRotate(board, board, rotation)\n          );\n        }) &&\n        [1, 2, 3, 4].every((reflection) => {\n          return !(\n            doSquaresReflect(square1, square2, reflection) &&\n            doBoardsReflect(board, board, reflection)\n          );\n        })\n      );\n    }\n  });\n}\n// rotate square position clockwise, 1 rotation being 90 degrees\nfunction rotateSquare(square, rotation) {\n  if (rotation % 4 === 0) {\n    return square;\n  } else {\n    return rotateSquare([square[1], 2 - square[0]], rotation - 1);\n  }\n}\n// does sq1 rotate to sq2 in rotation rotations\nfunction doSquaresRotate(sq1, sq2, rotation) {\n  return arrEq(rotateSquare(sq1, rotation), sq2);\n}\n// does board1 look like board2 after rotation rotations\nfunction doBoardsRotate(board1, board2, rotation) {\n  return allSquares.every((square) => {\n    let [row1, col1] = square;\n    let [row2, col2] = rotateSquare(square, rotation);\n    return board1[row1][col1] === board2[row2][col2];\n  });\n}\n\n// reflect square using arbitrary indexing of reflections\nfunction reflectSquare(square, reflection) {\n  let [row, col] = square;\n  switch (reflection) {\n    case 1: // diag1: \\\n      return [col, row];\n    case 2: // diag2: /\n      return [2 - col, 2 - row];\n    case 3: // hori: --\n      return [2 - row, col];\n    case 4: // vert: |\n      return [row, 2 - col];\n    default:\n      return \"Error\";\n  }\n}\n// does sq1 reflect to sq2 via reflection given\nfunction doSquaresReflect(sq1, sq2, reflection) {\n  return arrEq(reflectSquare(sq1, reflection), sq2);\n}\n// does board1 look like board2 after given reflection\nfunction doBoardsReflect(board1, board2, reflection) {\n  return allSquares.every((square) => {\n    let [row1, col1] = square;\n    let [row2, col2] = reflectSquare(square, reflection);\n    return board1[row1][col1] === board2[row2][col2];\n  });\n}\n\n// special cases\n\nfunction isSpecialCase(board, toPlay, square, specialBoard, specialSquare) {\n  return (\n    [1, 2, 3].some((rotation) => {\n      return (\n        doSquaresRotate(square, specialSquare, rotation) &&\n        doBoardsRotate(board, specialBoard, rotation)\n      );\n    }) ||\n    [1, 2, 3, 4].some((reflection) => {\n      return (\n        doSquaresReflect(square, specialSquare, reflection) &&\n        doBoardsReflect(board, specialBoard, reflection)\n      );\n    })\n  );\n}\n\nfunction scorePlay(square, board, toPlay) {\n  if (\n    isSpecialCase(board, toPlay, square, specialBoard1(toPlay), specialSquare1)\n  ) {\n    return 500;\n  }\n  if (\n    isSpecialCase(board, toPlay, square, specialBoard2(toPlay), specialSquare2a)\n  ) {\n    return -500;\n  }\n  if (\n    isSpecialCase(board, toPlay, square, specialBoard2(toPlay), specialSquare2b)\n  ) {\n    return -500;\n  }\n  var score = 0;\n  lines\n    .slice()\n    .filter((line) => {\n      return arrIncludes(line, square);\n    })\n    .forEach((line) => {\n      score += scorePlayRelativeToLine(square, board, line, toPlay);\n    });\n  return score;\n}\nfunction scorePlayRelativeToLine(square, board, line, toPlay) {\n  let sortedPieces = line.map(([row, col]) => board[row][col]).sort();\n  if (arrEq(sortedPieces, [-1, toPlay, toPlay])) {\n    // can win right now\n    return 1000;\n  } else if (arrEq(sortedPieces, [-1, 1 - toPlay, 1 - toPlay])) {\n    // opponent can win next turn\n    return 100;\n  } else if (arrEq(sortedPieces, [-1, -1, toPlay])) {\n    // set self up to win next turn\n    return 10;\n  } else if (arrEq(sortedPieces, [-1, -1, 1 - toPlay])) {\n    // prevent opponent setting self up to win next turn\n    return 9;\n  } else if (arrEq(sortedPieces, [-1, -1, -1])) {\n    // empty line\n    return 2;\n  } else if (arrEq(sortedPieces, [-1, 0, 1])) {\n    // this line is useless as nobody can win in it\n    return -2;\n  }\n  return \"Error\";\n}\nfunction sortScoredSquares(a, b) {\n  if (b.score !== a.score) {\n    return b.score - a.score;\n  }\n}\n\n// primary function\n\nfunction findNextPlay(diff, board, toPlay) {\n  // PROBLEM: on first move, first 4 options are corners, so they are virtually always selected, even for rookie ron\n\n  // all computer players play the same strategy\n  // playable positions are shuffled, assigned a score, and sorted\n  //  (not quite that order) - and isomorphic options are removed\n  //    (otherwise they get bunched and the chances of skipping are tiny)\n  // computer 'attempts' to play each in order,\n  //   with weighted success rate (based on difficulty of computer player)\n  let orderedPlays = _.shuffle(allSquares.slice())\n    .filter((square) => isValidPlay(square, board))\n    .filter((square, index, squares) =>\n      isNotDuplicate(board, square, index, squares)\n    )\n    .map((square) => {\n      let [row, col] = square;\n      return { row, col, score: scorePlay(square, board, toPlay) };\n    })\n    .sort(sortScoredSquares);\n\n  console.log(orderedPlays);\n\n  for (let square of orderedPlays) {\n    if (probabilityOfOptimalPlay(diff) > Math.random()) {\n      return square;\n    }\n  }\n  // randomly sample squares until an open one is found\n  return randomPlay(board);\n}\n\nexport { computerName, computerColour, findNextPlay };\n// export for testing\nexport {\n  isValidPlay,\n  scorePlay,\n  allSquares,\n  lines,\n  scorePlayRelativeToLine,\n  arrIncludes,\n  rotateSquare,\n  doSquaresRotate,\n  doBoardsRotate,\n  isNotDuplicate,\n};\n","import { useState } from \"react\";\n\nimport { computerName, computerColour } from \"./computerPlayers.js\";\n\nfunction isColour(str) {\n  let s = new Option().style;\n  s.color = str;\n  return s.color !== \"\";\n}\nfunction numericAdjective(num) {\n  if (num < 13) {\n    return [\n      \"First\",\n      \"Second\",\n      \"Third\",\n      \"Fourth\",\n      \"Fifth\",\n      \"Sixth\",\n      \"Seventh\",\n      \"Eight\",\n      \"Ninth\",\n      \"Tenth\",\n      \"Eleventh\",\n      \"Twelth\",\n      \"Thirteenth\",\n    ][num];\n  } else if (num % 10 === 1) {\n    return num + \"st\";\n  } else if (num % 10 === 2) {\n    return num + \"nd\";\n  } else if (num % 10 === 3) {\n    return num + \"rd\";\n  } else {\n    return num + \"th\";\n  }\n}\nfunction getDifficulty(diff) {\n  if (diff) {\n    return parseInt(diff, 10);\n  } else {\n    return Math.floor(Math.random() * 3);\n  }\n}\n\nfunction PlayerSelection({ players, setPlayers }) {\n  return (\n    <>\n      <div>\n        Enter the {numericAdjective(players.length).toLowerCase()} player's\n        information, or select a difficulty for a computer-controlled player.\n      </div>\n      <SelectHuman players={players} setPlayers={setPlayers} />\n      <SelectComputer players={players} setPlayers={setPlayers} />\n    </>\n  );\n}\n\nfunction SelectHuman({ players, setPlayers }) {\n  /* for temporary storage when creating a player */\n  const [player, setPlayer] = useState({ name: \"\", colour: \"\" });\n\n  return (\n    <form>\n      <label htmlFor=\"name\">\n        Name:\n        <input\n          type=\"text\"\n          id=\"name\"\n          name=\"name\"\n          placeholder=\"Enter a display name...\"\n          value={player.name}\n          onChange={(e) => {\n            setPlayer({ ...player, name: e.target.value });\n          }}\n        />\n      </label>\n      <label htmlFor=\"colour\">\n        Colour:\n        <input\n          type=\"text\"\n          id=\"colour\"\n          name=\"colour\"\n          placeholder=\"Pick your piece colour...\"\n          value={player.colour}\n          onChange={(e) => {\n            setPlayer({ ...player, colour: e.target.value.toLowerCase() });\n          }}\n        />\n      </label>\n      <input\n        type=\"submit\"\n        value=\"Submit\"\n        onClick={(e) => {\n          e.preventDefault();\n          if (isColour(player.colour)) {\n            setPlayers([\n              ...players,\n              {\n                name: player.name,\n                colour: player.colour,\n                type: \"human\",\n                wins: 0,\n                draws: 0,\n                loses: 0,\n              },\n            ]);\n            setPlayer({ ...player, name: \"\", colour: \"\" });\n          } else {\n            alert(\"Enter a valid colour.\");\n          }\n        }}\n      />\n    </form>\n  );\n}\n\nfunction SelectComputer({ players, setPlayers }) {\n  /* for temporary storage when creating a player */\n  const [player, setPlayer] = useState({ difficulty: \"\" });\n\n  return (\n    <form>\n      <label htmlFor=\"difficulty\">\n        Difficulty:\n        <select\n          id=\"difficulty\"\n          name=\"difficulty\"\n          value={player.difficulty}\n          onChange={(e) => {\n            setPlayer({ ...player, difficulty: e.target.value });\n          }}\n        >\n          <option value=\"\">Random</option>\n          <option value=\"0\">Easy</option>\n          <option value=\"1\">Medium</option>\n          <option value=\"2\">Hard</option>\n        </select>\n      </label>\n      <input\n        type=\"submit\"\n        value=\"Submit\"\n        onClick={(e) => {\n          e.preventDefault();\n          let diff = getDifficulty(player.difficulty);\n          setPlayers([\n            ...players,\n            {\n              name: computerName(diff),\n              type: \"computer\",\n              difficulty: diff,\n              colour: computerColour(diff),\n              wins: 0,\n              draws: 0,\n              loses: 0,\n            },\n          ]);\n          setPlayer({ ...player, difficulty: \"\" });\n        }}\n      />\n    </form>\n  );\n}\n\nexport default PlayerSelection;\n","function SelectGoFirst({ players, setPlayers, setToPlay }) {\n  return (\n    <>\n      <div>Select which player will go first.</div>\n      {players.map((player, index) => {\n        return (\n          <button\n            key={index}\n            type=\"button\"\n            onClick={() => {\n              setToPlay(index);\n              let newPlayers = [...players];\n              newPlayers[index].piece = \"x\";\n              newPlayers[1 - index].piece = \"o\";\n              setPlayers(newPlayers);\n            }}\n          >\n            {player.name}\n          </button>\n        );\n      })}\n    </>\n  );\n}\n\nexport default SelectGoFirst;\n","function BoardSquare({\n  square,\n  r_ind,\n  c_ind,\n  players,\n  outcome,\n  toPlay,\n  placePiece,\n}) {\n  if (square !== -1) {\n    /* piece already placed here */\n    return <span> .{players[square].piece}. </span>;\n  } else if (\n    outcome === -1 &&\n    toPlay >= 0 &&\n    players[toPlay].type === \"human\"\n  ) {\n    /* no piece here, first player has been selected, square is valid move */\n    return (\n      <button\n        key={c_ind}\n        type=\"button\"\n        onClick={() => placePiece(r_ind, c_ind)}\n      >\n        .\n      </button>\n    );\n  } else {\n    /* no piece here, game not started, or won, or computer to play */\n    return <span key={c_ind}> .... </span>;\n  }\n}\n\nfunction Board({ board, players, toPlay, outcome, placePiece }) {\n  return board.map((row, r_ind) => {\n    return (\n      <div key={r_ind}>\n        {row.map((square, c_ind) => {\n          return (\n            <BoardSquare\n              key={c_ind}\n              square={square}\n              r_ind={r_ind}\n              c_ind={c_ind}\n              players={players}\n              outcome={outcome}\n              toPlay={toPlay}\n              placePiece={placePiece}\n            />\n          );\n        })}\n      </div>\n    );\n  });\n}\n\nexport default Board;\n","function GameMessage({ outcome, players, toPlay }) {\n  if (outcome === -1) {\n    // game on-going\n    return <div>Next to play: {players[toPlay].name}</div>;\n  } else if (outcome === 2) {\n    // it's a draw\n    return <div>It's a draw.</div>;\n  } else {\n    // outcome indicates which players has won\n    return <div>{players[outcome].name} wins!</div>;\n  }\n}\n\nexport default GameMessage;\n","function SelectRestart({ outcome, reset, resetBoard }) {\n  return (\n    <>\n      <button type=\"button\" onClick={resetBoard}>\n        Play Again\n      </button>\n      <button type=\"button\" onClick={reset}>\n        New Players\n      </button>\n    </>\n  );\n}\n\nexport default SelectRestart;\n","import { useState, useEffect } from \"react\";\n\nimport Header from \"./Header.js\";\nimport SelectPlayer from \"./SelectPlayer.js\";\nimport SelectGoFirst from \"./SelectGoFirst.js\";\nimport Board from \"./Board.js\";\nimport GameMessage from \"./GameMessage.js\";\nimport SelectRestart from \"./SelectRestart.js\";\n\nimport { computerColour, findNextPlay } from \"./computerPlayers.js\";\n\nimport \"./index.css\";\n\nfunction App() {\n  /* constants */\n\n  /* a player consists of: name, colour, type, wins, draws, loses */\n  const [players, setPlayers] = useState([]);\n  /* board position is i for player i, -1 for empty */\n  const initBoard = [\n    [-1, -1, -1],\n    [-1, -1, -1],\n    [-1, -1, -1],\n  ];\n  const [board, setBoard] = useState(initBoard);\n  const [toPlay, setToPlay] = useState(-1);\n  /* 0, 1 for player win, -1 for not yet, 2 for draw */\n  const [outcome, setOutcome] = useState(-1);\n\n  /* effects */\n\n  useEffect(() => {\n    // if computer's turn, do it's move\n    if (toPlay >= 0 && players[toPlay].type === \"computer\") {\n      let { row, col } = findNextPlay(\n        players[toPlay].difficulty,\n        board,\n        toPlay\n      );\n      setTimeout(() => {\n        placePiece(row, col);\n      }, 700 + players[toPlay].difficulty * 350);\n    }\n  }, [toPlay]);\n  useEffect(() => {\n    // reselect a computer colour if necessary to avoid conflict\n    if (players.length === 2 && players[0].colour === players[1].colour) {\n      if (players[1].type === \"computer\") {\n        let newPlayers = [...players];\n        newPlayers[1].colour = computerColour(-1);\n        setPlayers(newPlayers);\n      } else if (players[0].type === \"computer\") {\n        let newPlayers = [...players];\n        newPlayers[0].colour = computerColour(-1);\n        setPlayers(newPlayers);\n      }\n    }\n  }, [players.length]);\n\n  /* functions */\n  function placePiece(r_ind, c_ind) {\n    let newBoard = [...board];\n    newBoard[r_ind][c_ind] = toPlay;\n    setBoard(newBoard);\n    if (won(r_ind, c_ind)) {\n      setOutcome(toPlay);\n      let newPlayers = [...players];\n      newPlayers[toPlay].wins += 1;\n      newPlayers[1 - toPlay].loses += 1;\n      setPlayers(newPlayers);\n    } else if (full()) {\n      setOutcome(2);\n      let newPlayers = [...players];\n      newPlayers[toPlay].draws += 1;\n      newPlayers[1 - toPlay].draws += 1;\n      setPlayers(newPlayers);\n    } else {\n      setToPlay(1 - toPlay);\n    }\n  }\n  /* check properties of the board */\n  function full() {\n    return ![...board[0], ...board[1], ...board[2]].includes(-1);\n  }\n  function won(r, c) {\n    //todo: redo with \"lines\"\n    return (\n      all_eq([toPlay, board[0][c], board[1][c], board[2][c]]) ||\n      all_eq([toPlay, board[r][0], board[r][1], board[r][2]]) ||\n      all_eq([toPlay, board[0][0], board[1][1], board[2][2]]) ||\n      all_eq([toPlay, board[0][2], board[1][1], board[2][0]])\n    );\n  }\n  function all_eq(arr) {\n    return new Set(arr).size === 1;\n  }\n\n  /* reset states */\n  function reset() {\n    resetBoard();\n    setPlayers([]);\n  }\n  function resetBoard() {\n    /* not just the board, but also the outcome and who goes first */\n    setBoard(initBoard);\n    setOutcome(-1);\n    setToPlay(-1);\n  }\n\n  /* return */\n\n  if (players.length < 2) {\n    return <SelectPlayer players={players} setPlayers={setPlayers} />;\n  } else if (toPlay === -1) {\n    /* pick who goes first */\n    return (\n      <>\n        <Header players={players} />\n        <Board\n          board={board}\n          players={players}\n          toPlay={toPlay}\n          outcome={outcome}\n          placePiece={placePiece}\n        />\n        <SelectGoFirst\n          players={players}\n          setPlayers={setPlayers}\n          setToPlay={setToPlay}\n        />\n      </>\n    );\n  } else {\n    return (\n      <>\n        <Header players={players} />\n        <Board\n          board={board}\n          players={players}\n          toPlay={toPlay}\n          outcome={outcome}\n          placePiece={placePiece}\n        />\n        <GameMessage players={players} toPlay={toPlay} outcome={outcome} />\n        {outcome !== -1 && (\n          <SelectRestart\n            outcome={outcome}\n            reset={reset}\n            resetBoard={resetBoard}\n          />\n        )}\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}