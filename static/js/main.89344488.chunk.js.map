{"version":3,"sources":["Header.js","App.js","index.js"],"names":["Header","players","toPlay","p0","p1","piece","name","wins","draws","App","useState","setPlayers","board","setBoard","setToPlay","outcome","setOutcome","player","setPlayer","resetBoard","computerName","diff","isColour","str","s","Option","style","color","placePiece","r_ind","c_ind","r","c","copyBoard","all_eq","newPlayers","loses","includes","arr","Set","size","useEffect","type","row","col","Math","floor","random","findNextPlay","difficulty","setTimeout","length","onClick","htmlFor","id","value","onChange","e","target","placeholder","colour","toLowerCase","preventDefault","parseInt","push","alert","map","index","square","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.89344488.chunk.js","sourcesContent":["\n\nfunction Header({ players, toPlay }) {\n\n  const [p0, p1] = players;\n\n  return (\n    <>\n      <header>\n        <span>{p0.piece} - </span>\n        <span>{p0.name} - </span>\n        <span>{p0.wins} win(s) || </span>\n        <span>{p0.draws} draw(s)</span>\n        <span> || {p1.wins} win(s) - </span>\n        <span>{p1.name} - </span>\n        <span>{p1.piece}</span>\n      </header>\n    </>\n  )\n}\n\nexport default Header;\n","import { useState, useEffect } from 'react'\n\nimport Header from './Header.js'\n\nimport './css/index.css'\n\nfunction App() {\n\n  /* constants */\n\n  /* a player consists of: name, colour, type, wins, draws, loses */\n  const [players, setPlayers] = useState(\n    [\n      /* dummy data for testing, initial state should be [] */\n      //{name: \"Alice\", colour: \"blue\", type: \"computer\", difficulty: 2, wins: 0, draws: 0, loses: 0},\n      //{name: \"Bob\", colour: \"red\", type: \"computer\", difficulty: 0, wins: 0, draws: 0, loses: 0}\n    ]\n  );\n  /* board position is i for player i, -1 for empty */\n  const [board, setBoard] = useState(\n    [[-1, -1, -1],[-1, -1, -1],[-1, -1, -1]]\n  );\n  const [toPlay, setToPlay] = useState(-1);\n  /* 0, 1 for player win, -1 for not yet, 2 for draw */\n  const [outcome, setOutcome] = useState(-1);\n  /* for temporary storage when creating a player */\n  const [player, setPlayer] = useState({});\n\n\n  /* effects */\n\n  useEffect(() => {\n    if (toPlay >= 0 && players[toPlay].type === \"computer\") {\n      // TODO: add proper strategy instead of random\n      let {row, col} = findNextPlay(players[toPlay].difficulty);\n      setTimeout(() => {\n        placePiece(row, col);\n      }, 700 + players[toPlay].difficulty * 350);\n    }\n  }, [toPlay]);\n\n\n  /* functions */\n\n  /* reset states */\n  function resetPlayers() {\n    /* also reset the board for when we come back later */\n    resetBoard();\n    setPlayers([]);\n  }\n  function resetBoard() {\n    /* not just the board, but also the outcome and who goes first */\n    let newBoard = [[-1, -1, -1], [-1, -1, -1], [-1, -1, -1]];\n    setBoard(newBoard);\n    setOutcome(-1);\n    setToPlay(-1);\n  }\n  function computerName(diff) {\n    switch(diff) {\n      case 0:\n        return \"Rookie Ron\";\n      case 1:\n        return \"Seasoned Sam\";\n      case 2:\n        return \"Expert Ellie\";\n      default:\n        return \"Error Erik\";\n    }\n  }\n  function isColour(str){\n    let s = new Option().style;\n    s.color = str;\n    return s.color !== '';\n  }\n\n  function placePiece(r_ind, c_ind) {\n    let copyBoard = [...board];\n    copyBoard[r_ind][c_ind] = toPlay;\n    setBoard(copyBoard);\n    if (won(r_ind, c_ind)) {\n      setOutcome(toPlay);\n      let newPlayers = [...players];\n      newPlayers[toPlay].wins += 1;\n      newPlayers[1 - toPlay].loses += 1;\n      setPlayers(newPlayers);\n    } else if (full()) {\n      setOutcome(2);\n      let newPlayers = [...players];\n      newPlayers[toPlay].draws += 1;\n      newPlayers[1 - toPlay].draws += 1;\n      setPlayers(newPlayers);\n    } else {\n      setToPlay(1 - toPlay);\n    }\n  }\n\n  /* check properties of the board */\n  function full() {\n    return !([...board[0], ...board[1], ...board[2]]).includes(-1)\n  }\n  function won(r, c) {\n    return (\n      all_eq([toPlay, board[0][c], board[1][c], board[2][c]]) ||\n      all_eq([toPlay, board[r][0], board[r][1], board[r][2]]) ||\n      all_eq([toPlay, board[0][0], board[1][1], board[2][2]]) ||\n      all_eq([toPlay, board[0][2], board[1][1], board[2][0]])\n    )\n  }\n  function all_eq(arr) {\n    return (new Set(arr)).size === 1\n  }\n\n\n  /* computer player strategies */\n  function findNextPlay(diff) {\n    var row = 1;\n    var col = 1;\n    while (board[row][col] !== -1) {\n      row = Math.floor(Math.random() * 3);\n      col = Math.floor(Math.random() * 3);\n    }\n    return {row, col}\n  }\n\n\n  /* return */\n  // TODO: split up into components once the structure is better understood\n\n  if (players.length < 2) {\n    /* create/select a player */\n    return (\n      <>\n        {players.length === 0 ?\n          <div>First Player:</div> :\n          <div>Second Player:</div>\n        }\n        <button type=\"button\" onClick={() => {\n            setPlayer({type: \"human\"})\n          }}\n        >\n        Player-Controlled\n        </button>\n        <button type=\"button\" onClick={() => {\n            setPlayer({type: \"computer\"})\n          }}\n        >\n        Computer-Controlled\n        </button>\n        {\n          player.type === \"computer\" && (\n            <form>\n              <label htmlFor=\"difficulty\">\n                Difficulty:\n                <select\n                  id=\"difficulty\"\n                  name=\"difficulty\"\n                  value={player.difficulty}\n                  onChange={(e) => {\n                    setPlayer({...player, difficulty: e.target.value});\n                  }}\n                >\n                  <option value=\"\">Random</option>\n                  <option value=\"0\">Easy</option>\n                  <option value=\"1\">Medium</option>\n                  <option value=\"2\">Hard</option>\n                </select>\n              </label>\n              <label htmlFor=\"colour\">\n                Colour:\n                <input\n                  type=\"text\"\n                  id=\"colour\"\n                  name=\"colour\"\n                  placeholder=\"Enter colour name or code...\"\n                  value={player.colour}\n                  onChange={(e) => {\n                    setPlayer({...player, colour: e.target.value.toLowerCase()});\n                  }}\n                />\n              </label>\n              <input\n                type=\"submit\"\n                value=\"Submit\"\n                onClick={(e) => {\n                  e.preventDefault();\n                  let diff = (\n                    !player.difficulty\n                  ) ? (\n                    Math.floor(Math.random() * 3)\n                  ) : (\n                    parseInt(player.difficulty, 10)\n                  );\n                  let newPlayers = [...players];\n                  newPlayers.push({\n                    name: computerName(diff),\n                    colour: player.colour,\n                    type: \"computer\",\n                    difficulty: diff,\n                    wins: 0,\n                    draws: 0,\n                    loses: 0\n                  })\n                  !isColour(player.colour) && alert(\"Enter a valid colour.\");\n                  isColour(player.colour) && setPlayers(newPlayers);\n                  isColour(player.colour) && setPlayer({});\n                }}\n              />\n            </form>\n          )\n        }\n\n        {\n          player.type === \"human\" && (\n            <form>\n              <label htmlFor=\"name\">\n                Name:\n                <input\n                  type=\"text\"\n                  id=\"name\"\n                  name=\"name\"\n                  placeholder=\"Enter a display name...\"\n                  value={player.name}\n                  onChange={(e) => {\n                    setPlayer({...player, name: e.target.value});\n                  }}\n                />\n              </label>\n              <label htmlFor=\"colour\">\n                Colour:\n                <input\n                  type=\"text\"\n                  id=\"colour\"\n                  name=\"colour\"\n                  placeholder=\"Pick your piece colour...\"\n                  value={player.colour}\n                  onChange={(e) => {\n                    setPlayer({...player, colour: e.target.value.toLowerCase()});\n                  }}\n                />\n              </label>\n              <input\n                type=\"submit\"\n                value=\"Submit\"\n                onClick={(e) => {\n                  e.preventDefault();\n                  let newPlayers = [...players];\n                  newPlayers.push({\n                    name: player.name,\n                    colour: player.colour,\n                    type: \"human\",\n                    wins: 0,\n                    draws: 0,\n                    loses: 0\n                  })\n                  !isColour(player.colour) && alert(\"Enter a valid colour.\");\n                  isColour(player.colour) && setPlayers(newPlayers);\n                  isColour(player.colour) && setPlayer({});\n                }}\n              />\n            </form>\n          )/* TODO: on submit of second player, select colour for comps at end */\n        }\n      </>\n    )\n\n\n  } else if (toPlay === -1) {\n    /* pick who goes first */\n    return (\n      <>\n      <Header\n      players={players}\n      Header/>\n      <div>Select who will go first:</div>\n      {\n        players.map((player, index) => {\n          return (\n            <button key={index} type=\"button\" onClick={() => {\n                setToPlay(index);\n                players[index].piece = 'x';\n                players[1 - index].piece = 'o';\n              }}\n            >\n            {player.name}\n            </button>\n          )\n        })\n      }\n      </>\n    )\n\n\n  } else {\n    /* show board, with buttons for humans as applicable */\n    return (\n      <>\n      <Header\n      players={players}\n      Header/>\n      { /* the board */\n        board.map((row, r_ind) => {\n          return (\n            <div key={r_ind}>\n            {\n              row.map((square, c_ind) => {\n                return (\n                  square !== -1 ? (\n                    /* piece already placed here */\n                    <span key={c_ind}> .{players[square].piece}. </span>\n                  ) : (\n                    (outcome === -1 && players[toPlay].type === \"human\") ? (\n                      /* no piece, is valid move */\n                      <button\n                        key={c_ind}\n                        type=\"button\"\n                        onClick={() => placePiece(r_ind, c_ind)}\n                      >\n                      ..\n                      </button>\n                    ) : (\n                      /* no piece, somebody already won */\n                      <span key={c_ind}> .... </span>\n                    )\n                  )\n                )\n              })\n            }\n            </div>\n          )\n        })\n      }\n      { /* who goes next */ /* this and below is common to the computer case */\n        outcome === -1 && (\n          <div>Next to play: {players[toPlay].name}</div>\n        )\n      }\n      { /* display winner */\n        (outcome === 0 || outcome === 1) && (\n          <h2>{players[outcome].name} wins!</h2>\n        )\n      }\n      { /* display draw */\n        outcome === 2 && (\n          <h2>It's a draw.</h2>\n        )\n      }\n      { /* show restart options */\n        outcome !== -1 && (\n          <>\n          <button\n            type=\"button\"\n            onClick={resetBoard}\n          >\n          Play Again\n          </button>\n          <button\n            type=\"button\"\n            onClick={resetPlayers}\n          >\n          New Players\n          </button>\n          </>\n        )\n      }\n      </>\n    )\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}