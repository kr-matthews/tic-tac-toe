{"version":3,"sources":["Header.js","GamePlay.js","App.js","index.js"],"names":["Header","players","toPlay","p0","p1","piece","name","wins","GamePlay","setPlayers","useState","board","setBoard","setToPlay","outcome","setOutcome","placePiece","r_ind","c_ind","r","c","copyBoard","all_eq","loses","includes","draws","arr","Set","size","map","player","index","type","onClick","row","square","App","colour","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c4290f66.chunk.js","sourcesContent":["\n\nfunction Header({ players, toPlay }) {\n\n  const [p0, p1] = players;\n\n  return (\n    <>\n      <header>\n        <span>{p0.piece} - </span>\n        <span>{p0.name} - </span>\n        <span>{p0.wins} win(s) || </span>\n        <span>{p1.wins} win(s) - </span>\n        <span>{p1.name} - </span>\n        <span>{p1.piece}</span>\n      </header>\n    </>\n  )\n}\n\nexport default Header;\n","import { useState } from 'react'\nimport Header from './Header.js'\n\nfunction GamePlay({players, setPlayers}) {\n\n  /* constants */\n  /* board position is i for player i, -1 for empty */\n  const [board, setBoard] = useState(\n    [[-1, -1, -1],[-1, -1, -1],[-1, -1, -1]]\n  );\n  const [toPlay, setToPlay] = useState(-1);\n  /* 0, 1 for player win, -1 for not yet, 2 for draw */\n  const [outcome, setOutcome] = useState(-1);\n\n  /* functions */\n  function resetBoard() {\n    let newBoard = [[-1, -1, -1], [-1, -1, -1], [-1, -1, -1]];\n    setBoard(newBoard);\n    setOutcome(-1);\n    setToPlay(-1);\n  }\n  function resetPlayers() {\n    return \"hmm\"\n  }\n\n  function placePiece(r_ind, c_ind) {\n    let copyBoard = [...board];\n    copyBoard[r_ind][c_ind] = toPlay;\n    setBoard(copyBoard);\n    // TODO: check win conditions here\n    if (won(r_ind, c_ind)) {\n      setOutcome(toPlay);\n      players[toPlay].wins += 1;\n      players[1 - toPlay].loses += 1;\n    } else {\n      // TODO: refactor the winning/drawing logic\n      setToPlay(1 - toPlay);\n      if (full()) {\n        setOutcome(2);\n        players[toPlay].draws += 1;\n        players[toPlay].draws += 1;\n      }\n    }\n  }\n\n  function full() {\n    return !([...board[0], ...board[1], ...board[2]]).includes(-1)\n  }\n\n  function won(r, c) {\n    return (\n      all_eq([toPlay, board[0][c], board[1][c], board[2][c]]) ||\n      all_eq([toPlay, board[r][0], board[r][1], board[r][2]]) ||\n      all_eq([toPlay, board[0][0], board[1][1], board[2][2]]) ||\n      all_eq([toPlay, board[0][2], board[1][1], board[2][0]])\n    )\n  }\n  function all_eq(arr) {\n    return (new Set(arr)).size === 1\n  }\n\n\n  /* return */\n  if (toPlay === -1) {\n    return (\n      <>\n        <div>Select who will go first:</div>\n        {\n          players.map((player, index) => {\n            return (\n              <button key={index} type=\"button\" onClick={() => {\n                    setToPlay(index);\n                    players[index].piece = 'x';\n                    players[1 - index].piece = 'o';\n                  }\n                }\n              >\n                {player.name}\n              </button>\n            )\n          })\n        }\n      </>\n    )\n  } else {\n    return (\n      <>\n        <div>WIP</div>\n        <Header\n          players={players}\n        Header/>\n        { /* the board */\n          board.map((row, r_ind) => {\n            return (\n              <div key={r_ind}>\n              {\n                row.map((square, c_ind) => {\n                  return (\n                    square !== -1 ? (\n                      /* piece already placed here */\n                      <span key={c_ind}> '{players[square].piece}' </span>\n                    ) : (\n                      outcome === -1 ? (\n                        /* no piece, is valid move */\n                        <button\n                        key={c_ind}\n                        type=\"button\"\n                        onClick={() => placePiece(r_ind, c_ind)}\n                        >\n                        \"\n                        </button>) : (\n                          /* no piece, somebody already won */\n                          <span key={c_ind}>'-'</span>\n                        )\n                      )\n                    )\n                  })\n                }\n                </div>\n              )\n            })\n          }\n          { /* who goes next */\n            outcome === -1 && (\n              <div>Next to play: {players[toPlay].name}</div>\n            )\n          }\n          { /* display winner */\n            (outcome === 0 || outcome === 1) && (\n              <h2>{players[outcome].name} wins!</h2>\n            )\n          }\n          { /* display draw */\n            outcome === 2 && (\n              <h2>It's a draw.</h2>\n            )\n          }\n          { /* show restart options */\n            outcome !== -1 && (\n              <>\n                <button\n                  type=\"button\"\n                  onClick={resetBoard}\n                >\n                  Play Again\n                </button>\n                <button\n                  type=\"button\"\n                  onClick={resetPlayers}\n                >\n                  New Players\n                </button>\n              </>\n            )\n          }\n        </>\n      )\n  }\n}\n\nexport default GamePlay;\n","import { useState } from 'react';\n\nimport GamePlay from './GamePlay.js'\n\nimport './css/index.css'\n\nfunction App() {\n\n  /* constants */\n  /* a player consists of: name, colour, type, wins, draws, loses */\n  const [players, setPlayers] = useState(\n    [\n      /* dummy data for testing, initial state should be [] */\n      {name: \"Alice\", colour: \"blue\", type: 0, wins: 0, draws: 0, loses: 0},\n      {name: \"Bob\", colour: \"red\", type: 0, wins: 0, draws: 0, loses: 0}\n    ]\n  );\n\n  return (\n    <GamePlay\n      players={players}\n      setPlayers={setPlayers}\n    />\n  )\n\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}